// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  name      String?
  roles     UserRole[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  products          Product[]         @relation("ProductCreatedBy")
  productCategories ProductCategory[] @relation("CategoryCreatedBy")
}

model Role {
  id    String     @id @default(uuid())
  name  String     @unique // e.g. 'admin', 'manager', 'sales'
  users UserRole[]
  permissions RolePermission[]
}

model UserRole {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@unique([userId, roleId])
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  module      String
  action      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  roles       RolePermission[]
}

model RolePermission {
  id           String      @id @default(uuid())
  role         Role        @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission  @relation(fields: [permissionId], references: [id])
  permissionId String

  @@unique([roleId, permissionId])
}

model ProductCategory {
  id          String    @id @default(uuid())
  name        String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String?
  createdBy   User?     @relation("CategoryCreatedBy", fields: [createdById], references: [id])
}

model Product {
  id          String          @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int
  categoryId  String
  category    ProductCategory @relation(fields: [categoryId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String?
  createdBy   User?    @relation("ProductCreatedBy", fields: [createdById], references: [id])
}
